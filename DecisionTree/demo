from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import pandas as pd

data=pd.read_csv(r"C:\Users\Wang Kang Li\Desktop\data.csv",index_col=0)
data.drop(["Cabin","Name","Ticket"],inplace=True,axis=1)
data["Age"]=data["Age"].fillna(data["Age"].mean())
data=data.dropna()

data["Sex"]=(data["Sex"]=="male").astype("int")
a=data["Embarked"]
#字典映射
a=a.replace({"S":0,"C":1,"Q":2})
data["Embarked"]=a
data["Embarked"]

x=data.iloc[:,data.columns!="Survived"]

y=data.iloc[:,data.columns=="Survived"]

xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.1)

xtrain.head()

#使用网格调参法
from sklearn.model_selection import GridSearchCV
import numpy as np

paremeters={
    "splitter":("best","random")
    ,"criterion":("gini","entropy")
    ,"max_depth":[*range(1,10)]
    ,"min_samples_leaf":[*range(1,50,5)]
}

clf=DecisionTreeClassifier(random_state=25)

cf=GridSearchCV(clf,paremeters,cv=10)

a=cf.fit(xtrain,ytrain)
b=cf.best_estimator_
b.fit(xtrain,ytrain)
#最好的模型参数
print(cf.best_params_)

print("val_score:",cf.best_score_)

#测试集上测试

print("test_score:",a.score(xtest,ytest))

#score1=a.score(xtest,ytest)
#print("test_score:",score1)

#endcoding:"utf-8"
from sklearn.tree import export_graphviz
import graphviz
import os # 以下这两行是手动进行环境变量配置，防止在本机环境的变量部署失败
os.environ['PATH'] = os.pathsep + r'C:\Program Files (x86)\Graphviz\bin'
# 生成dot_data
dot_data = export_graphviz(clf, out_file=None,
                           feature_names= ['alcohol ','malic_acid', 'ash','alcalinity_of_ash','magnesium', 'total_phenols','flavanoids', 'nonflavanoid_phenols', 'proanthocyanins', 'color_intensity', 'hue', 'od280/od315_of_diluted_wines', 'proline'], class_names=["0","1","2"], rounded=True, filled=True) # rounded和字体有关，filled设置颜色填充
# 将生成的dot_data内容导入到txt文件中
f = open('dot_data.txt', 'w')
f.write(dot_data)
f.close()
# 修改字体设置，避免中文乱码！
import re
f_old = open('dot_data.txt', 'r')
f_new = open('dot_data_new.txt', 'w', encoding='utf-8')
for line in f_old:
    if 'fontname' in line:
        font_re = 'fontname=(.*?)]'
        old_font = re.findall(font_re, line)[0]
        #line = line.replace(old_font, 'SimHei')
    f_new.write(line)
f_old.close()
f_new.close()
# 以PNG的图片形式存储生成的可视化文件
os.system('dot -Tpng dot_data_new.txt -o 决策树模型.png')
print('决策树模型.png已经保存在代码所在文件夹！')
# 以PDF的形式存储生成的可视化文件
os.system('dot -Tpdf dot_data_new.txt -o 决策树模型.pdf')
print('决策树模型.pdf已经保存在代码所在文件夹！')

